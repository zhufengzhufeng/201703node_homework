        * 所有的操作需要在根路径下
	* 如何解决上传到github上的txt文件是乱码的问题    把txt文件拉到web storm中进行编辑（utf-8格式），再上传
	* 1.在命令行窗口中，按tab建可以自动补全
	* 2.makedir xx  创建文件夹   cd .. 进入到上一级目录
	* 3.git init初始化git   多了一个.git文件  .表示隐藏文件
	* 4.ls -a 查看目录中的文件   touch xx.txt 创建一个文本文件（也可以创建一个隐藏文件）  cat  xxx.txt查看文件中的内容
	* 5.编辑文件内容   vi  xx.txt   再按一下i，变成可以编辑的状态，先保存（Esc）,再按一下冒号:    再输入wq      q!(强制退出)
	* 6.查看git状态   git status
	* 7.git add .表示工作区的内容已经成功提交到暂存区/过渡区（删除暂存区的文件  git rm --cached  xx.txt）
	* 8.git commit  -m  "提交的注释或信息"  把已经提交到暂存区的文件提交到历史区/版本库
	* 9.git log   查看当前提交日志     git reflog  查看所有包括回滚版本的日志
	* 创建文件夹   mkdir   xxx
	* git diff  比较版本库的不同 工作区和暂存区
	* git diff master     工作区和历史区
	* git diff --cached   暂存区和历史区
	* 放弃在工作区的更改（或者回滚暂存区的内容,也就是工作区的内容提交到暂存区后，再修改提交的文件，例如xxx.txt ，但是反悔了，执行git checkout xxx.txt 后，git checkout xxx.txt 又会返回没有修改之前的状态）    git checkout xxx.txt
	* 从历史区回滚到工作区（硬回滚）   git reset --hard id号码 （id号通过git log获取，至少前7位）
	* git reset HEAD  xx.txt    将这个文件回到上一次暂存区中（提交错误的时候，可以执行这个命令将提交到暂存区的文件移除掉）

	* git branch dev（分支名） 创建一个dev分支
	* git branch查看当前分支    git checkout  dev（分支名）   切换到dev分支
	* 创建并切换分支  git checkout -b dev（分支名）
	* 删除分支  git branch -D dev（分支名）
	* 默认创建后的分支和未创建之前的分支，文件是一模一样的，文件既属于小分支，也属于主分支。
	* 分支提交后,提交到某个分支上（git add . ; git commit -m "mesg"，可以联合提交仅限提交过的文件 git commit -a -m "msg"），这个文件才真正属于某个分支
	* 主分支上拉取自己的小分支进行开发，小分支提交后，
	* 合并分支（主分支合并小分支）-》切换到主分支，然后执行 git merge  dev(分支名)
	* echo '内容' >>README.md   把内容输出到某个文件(不需要创建README.md ，执行完echo '内容' >>README.md 后，README.md 会自动创建，并且'内容' 自动添加到README.md 中)    一个大于号是输入    2个大于号是向README.md 内容的后面再追加内容
	* 增加忽略文件(首先touch .ignore )   常见的忽略文件有.idea(webstorm的配置文件)  node_modules   bower_components
	* git remote add origin https://github.com/hhhh4544/exam.git    origin是仓库名
	* git remote -v 查看所有已经链接的仓库
	* 向远程仓库github推送文件   git push origin master
	* 初始化后，再创建.ignore文件，再通过git add . 提交

