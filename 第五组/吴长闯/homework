## 第一部分基础知识
### vue中常用的处理数组的方法
#### find方法:查找，如果为true，返回查找的那一项
#### every方法：数组中每一项都符合函数要求才返回true
#### include方法：简易的判断数组是否包含这一项
#### some方法：有一项符合就返回true，最后返回的是布尔类型值
#### filter:筛选，返回符合条件的新数组，对旧数组不操作
#### map(映射)方法：对数组中每个数执行函数，返回新数组，
#### forEach方法：对每一项运行传入的函数，没有返回值，本质上和for循环一样，逼格更高
#### reduce/reduceRight方法：迭代每一项，上一次相加之和等于当前项的第一项，直至数组完全迭代


```javascript
var ary=[1,2,3,4,5];
var everyResult=ary.every(function(item,index,array){
return (item>2);

});
alert(everyResult)://false
var someResult=ary.some(function(item,index,array){
return(item>2);

});
alert(someResult);//true
var filterResult=ary.filter(function(item,index,array){
return (item>2);

});
alert(filterResult);//[3,4,5];
var mapResult=ary.map(function(item,index,array){
    return item*2;
});
alert(mapResult);//[2,4,6,8,10];

ary.forEach(function(item,index,array){
    //执行某些操作
});

var reduceResult=ary.reduce(function(prev,cur,index,array){
return prev+cur;

});
alert(reduceResult);//15

//这里reduce在应用的时候有一种特殊的情况，如下：
var res=[{price:10},{price:20},{price:30}].reduce(function (prev,next,index,arr) {
        return prev.price+next.price;

    },0);
    console.log(res);
var findResult=ary.find(function(item,index,array){
return (item===2);

});
alert(findResult);//2,返回的是符合条件的对应项


```
#### 来一道面试题：把[[1,2,3],[4,5],[7,7]]转化为[1,2,3,4,5,7,7];
```javascript
let newArrs=[[1,2,3],[4,5],[7,7]].reduce((prev,next)=>[...prev,...next]);
    console.log(newArrs);
```
## vue实战操作部分
### 由于vue是用ES6编写的，所以要好重新复习ES6~~~
#### 1.配置环境,引入vue
#### 2.new一个vue的实例，构造函数模式，使用vue就是操作数据，它是典型的声明式，会用就好，不必追求原理
```javascript
let vm=new Vue({
    el:'#app',
    data:{
//这里可以放入各种数据类型：boolean，number,string,undefined,null ,object,array,function
heros:[{name:'孙悟空'，score：'5000'},{name:'黑猫警长'，score：'100'}，{name:'漩涡鸣人'，score：'10000'}]
    },
    msg:'yourname'
}),
methods:{
    a(){

    },
    b(){

    }
}

```
#### {{}}：最基本的的数据添加的方式，但可能会导致闪烁的问题，可以用v-text解决，有三点需要注意
##### 可以放三元表达式，可以赋值，必须要有返回值
#### input的特点 可以展现数据 可以修改数据
#### v-model 只能绑定变量 先将对应的数据 放到输入框的value值上
#### v-model 会监听输入框的输入事件 oninput,将值放回到数据中，双向数据绑定
### mehtod方法
#### 默认的onClick会带一层函数 这个函数中 写的内容是 你写的东西 如果只写一个a 则没变化，写了a()才会调用a函数
#### 函数执行时 带括号一般是传递参数，会丢失event源，可以手动传递属性$event，v-on在事件中可以简写成@符号
#### 路由：通过路径的变化，显示不同的内容（hash值&&浏览器自带的history）
window.history.go(-1)
window.history.back(-1)
h5 window.history.pushState({},null,'/aaa')路径可以存在也可以不存在
如果想使用history.pushState是需要后台支持的（页面不存在会刷新导致404），开发时用hash值，上线用histor.pushState
### localstorage
### 可以将数据存储到浏览器中 h5 有兼容性 新特性
### localStorage.setItem('key','value')使用前者会自动转化为字符串(JSON.stringify)，取出来的结果要转化为对象（JSON.parse）
### localStorage.getItem('key')
### localStorage.clear() 清空浏览器存储的数据

