
命令：

1、使用git之前需要先配置用户和邮箱：

git config --global user.name '用户名'

git config --global user.email '邮箱'

2、查看配置：git config --list

3、创建目录：mkdir 名称

4、创建文件：touch 名称

5、查看文件中的内容：cat 名称

6、编辑文件： vi 名称  i/a编写  esc -> :wq 保存并退出 q！强制退出

7、初始化git：git init

8、如果初始化错误，删除git：rm -rf.git

9、查看目录中的所有文件：is al

10、git分为工作区 - 暂存区 - 历史区

把项目添加到暂存区：git add '文件名' 或者 git add .

把项目添加到历史区：git commit -m '注释' 注释一定要写

11、查看历史状态(日志)：git log

12、查看文件状态：git status

13、不同区的代码比较：git diff

工作区和暂存区：git diff

暂存区和历史区：git diff -cached

工作区和历史区：git diff master

14、将暂存区和工作区变得一致：git checkout '文件名'

15、查看所有版本记录：git reflog

16、将工作区，暂存区，历史区全部一致：git reset --hard  ID号

17、在暂存区删除掉这个文件，回到上一个版本：git reset HEAD 文件名

18、查看分支：git branch

19、创建分支：git branch 分支名称  分支的内容和主干内容一模一样

20、切换分支：git checkout 分支名称

21、删除分支：git branch -D 分支名称

22、创建分支并且进入：git checkout -b 分支名称

23、合并分支：git merge 分支名称(最好大分支合并小分支)

24、提交过一次的文件再次提交可简写：git commit -a -m '描述'

25、主干和分支有一模一样文件名的未提交文件，不属于任何人，只有提交到某个分支上，这个文件就归

属于提交的分支，一般情况下，开发项目，都会有一个主分支，在这个主分支上拉取自己的小分支进行开

发。如果发生错误不会影响主分支；解决冲突：去掉 >>>>> ====== <<<<<保留最终的结果，再次提交即

可


同步远程仓库：


1、注册账号，新建项目

You profile -> Repositories -> New -> Repository name填写仓库名 ->Description仓库描述(选填) -> Create repository

2、初始化：git init

3、添加远程仓库：echo '# 仓库名' >> README.md

4、添加忽略文件(推送远程仓库的时候带以下后缀名或者文件的都不上传)：

(1)touch .gitignore

(2).DS_Store

(3)node_modules

(4).idea

(5)bower_components

5、提交

git add .

git commit -m '描述'

6、链接远程仓库：git remote add origin '地址(仓库建好后会有地址一般用HTTPS的)'

7、推送：git push -u origin master(如果第一次推送的时候写了-u，以后推送只需要写git push即可)

完成之后刷新页面

注意：操作git命令 永远在根路径下！！！,先创建.gitignore在执行add加入暂存区，否则导致没忽略掉
，删除本地.idea 再次add 即可


发布静态页：


git checkout -b gh-pages(这里是固定名称)
git add .
git commit -m 'ok'
gut push origin gh-pages

在settings中找到新的网址 观看页面，如果文件名不是index.html则需要手动添加后缀名


作业提交流程：


1、进入组长给的链接 -> Fork -> Clone or download复制链接 -> 打开命令行 -> git clone 链接 ->

git remote add teamleader 组长的地址 -> 在对应的文件夹里放入自己的文件 -> git add . git
commit -m '描述'(提交) -> git pull teamleader master（拉取组长的最新代码）-> git push origin
master(提交到自己的仓库) ->网页发送合并请求

