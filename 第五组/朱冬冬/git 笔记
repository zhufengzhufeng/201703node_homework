# git
先创建一个仓库
在一个目录下
第一步 创建一个文件夹（mkdir  zdd）
创建了一个名字为zdd的文件夹
第二步 进入这个文件夹（cd  zdd）
第三步 显示以下当前目录（pwd）
第四步 把zdd变成可以管理的git仓库（git  init）
第五步 可以查看以下当前文件夹里有什么文件
（ls  -a）
第六步 在zdd文件夹里创建一个txt文本在webstrom里创建；
第七步把txt文件添加到仓库中（git  add remy.txt）这是添加单独的文件如果想要把所有的都添加进去就把文件名换成 .   点
第八步把文件提交到仓库（git commit -m '描述'）
-m可以自定义 后面的描述也可以自定义最好语义化
至此 提交结束
如果想要再次提交修改 则直接先把txt里的内容更改，然后查看更改了哪些内容（git diff）；然后在添加到仓库（git add  .）;然后在提交到仓库（git commit -m 'add'）描述最好写不一样的；
这样可以重复修改添加多个

可以查看历史修改记录（git log）

假设写了三个版本，但是我想要回到上一个版本可以用(git  reset  --hard  HEAD^)来退回，里面的HEAD是当前版本 和HEAD^是上一个版本，HEAD^^是上上个版本以此类推 如果上100个用^不方便些 那么直接用(HEAD~100);
现在 在查看文本已经回到了上一个版本查看内容（cat  readme.txt）;
现在就只能看见两个版本了，但是突然发现第三个版本还想要那怎么 只要当前命令符没有关闭那么就可以恢复，找到第三个版本的版本号，只要前几位就可以（git  reset  --hard  3628164）；
假如你真的关闭了命令符那么也可以找回输入（git  reflog）这样可以查看你之前的历史记录当前也有版本号，这样就可以恢复了；
创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改。
命令可以查看工作区和版本库里面最新版本的区别 （git  diff  HEAD  --  readme.txt） ；

创建一个分支并且命名（ git  checkout  -b  dev）名字为dev，因为加上了 -b相当于创建并改变了指向；
查看当前分支 （git  branch），返回的带有*号的就是当前分支；
可以试着把里面的txt文件改动一下 然后提交工作区，历史区，然后返回master分支，查看一下，txt文件发现刚才改动的地方没变化，因为刚才改变的是dev分支上的文件，master分支上的没变化；
如果想要这两个分支合并的话（git  merge  dev）git merge 命令用于合并指定分支到当前分支，然后在查看txt文件，发现现在是最新改动的文件，因为两个合并了，然后就可以删除dev分支了；
删除dev分支（git  branch）;
在查看有多少分支（git  branch）,发现只有一个master的分支了；

分支命令
创建与合并分支

阅读: 923655
在版本回退里，你已经知道，每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。

一开始的时候，master分支是一条线，Git用master指向最新的提交，再用HEAD指向master，就能确定当前分支，以及当前分支的提交点：

git-br-initial

每次提交，master分支都会向前移动一步，这样，随着你不断提交，master分支的线也越来越长：


0:19

 当我们创建新的分支，例如dev时，Git新建了一个指针叫dev，指向master相同的提交，再把HEAD指向dev，就表示当前分支在dev上：

git-br-create

你看，Git创建一个分支很快，因为除了增加一个dev指针，改改HEAD的指向，工作区的文件都没有任何变化！

不过，从现在开始，对工作区的修改和提交就是针对dev分支了，比如新提交一次后，dev指针往前移动一步，而master指针不变：

git-br-dev-fd

假如我们在dev上的工作完成了，就可以把dev合并到master上。Git怎么合并呢？最简单的方法，就是直接把master指向dev的当前提交，就完成了合并：

git-br-ff-merge

所以Git合并分支也很快！就改改指针，工作区内容也不变！

合并完分支后，甚至可以删除dev分支。删除dev分支就是把dev指针给删掉，删掉后，我们就剩下了一条master分支：

git-br-rm

真是太神奇了，你看得出来有些提交是通过分支完成的吗？


0:33

 下面开始实战。

首先，我们创建dev分支，然后切换到dev分支：

$ git checkout -b dev
Switched to a new branch 'dev'
git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：

$ git branch dev
$ git checkout dev
Switched to branch 'dev'
然后，用git branch命令查看当前分支：

$ git branch
* dev
  master
git branch命令会列出所有分支，当前分支前面会标一个*号。

然后，我们就可以在dev分支上正常提交，比如对readme.txt做个修改，加上一行：

Creating a new branch is quick.
然后提交：

$ git add readme.txt 
$ git commit -m "branch test"
[dev fec145a] branch test
 1 file changed, 1 insertion(+)
现在，dev分支的工作完成，我们就可以切换回master分支：

$ git checkout master
Switched to branch 'master'
切换回master分支后，再查看一个readme.txt文件，刚才添加的内容不见了！因为那个提交是在dev分支上，而master分支此刻的提交点并没有变：

git-br-on-master

现在，我们把dev分支的工作成果合并到master分支上：

$ git merge dev
Updating d17efd8..fec145a
Fast-forward
 readme.txt |    1 +
 1 file changed, 1 insertion(+)
git merge命令用于合并指定分支到当前分支。合并后，再查看readme.txt的内容，就可以看到，和dev分支的最新提交是完全一样的。

注意到上面的Fast-forward信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。

当然，也不是每次合并都能Fast-forward，我们后面会讲其他方式的合并。

合并完成后，就可以放心地删除dev分支了：

$ git branch -d dev
Deleted branch dev (was fec145a).
删除后，查看branch，就只剩下master分支了：

分支命令符
查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>
创建+切换分支：git checkout -b <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>


用git log --graph命令可以看到分支合并图。






可以查看结果（git status）

