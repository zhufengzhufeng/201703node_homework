版本控制系统：
1，集中式 svn
中央处理器 完全依赖于中央处理器，如果中央处理器挂掉，信息全部丢失
2，分布式 git
不依赖于中央处理器 中央处理器就类似于中转站 提交到中转站需要联网，如果提交本地，不需要联网


git使用方式：
命令行 window commond
图形化界面 sourceT


初始化git的管理范围
cd .. change directory  改变当前目录
pwd  print working directory 打印当前工作目录
~/desktop  ~代表当前用户


配置当前用户信息
用户名采用 github账户和邮箱，没有配置过，不能使用commit
git config --global user.name '**'
git config --global user.email '**@qq.com

git config --list 配置列表 查看你的配置信息是否已经成功
user.name=yangxiaozhen0505
user.email=736453008@qq.com


创建目录 mkdir ***
或者md ***

创建空文件
touch index.txt

查看文件ls
查看文件里内容 cat index.txt

vi index.txt 插入模式 默认不能更改
i/a 插入模式，进入可编辑状态

esc 退出编辑模式 再按冒号
保存编辑内容 w 退出q 不想保存，强制退出 q!

初始化git init 在创建的文件目录下初始化

ls 展示当前文件夹  隐藏文件看不到
ls-a   可以查看隐藏文件夹




添加文件到暂存区
git add ***.***
git status 查看文件当前状态
从暂存区添加文件到历史区
git commit -m ***.***
git log 查看提交日志
在工作区的文件夹显示是红色 在暂存区的文件夹显示是绿色

git diff
比较版本的不同
git diff   git的不同  工作区和暂存区
git diff master       工作区和历史区
git diff --chached    暂存区和历史区

写错了，想从暂存区回到工作区
git chechout ***.***

强制从历史区回到暂存区
历史区，暂存区和工作区一致
 git reset --hard id号


 git reflog 查看以往所有的日志
 暂存区回到上一个操作状态，移除bug文件
 git reset HEAD ***.***


 git branch 查看当前分支

 git branch dev 创建一个分支

 git checkout 分支名 切换分支

 git branch -D 分支名 删除分支，如果当前在这个分支上，不能删除，需先切换到其他分支上，再删除

 创建并切换分支
 git checkout -b dev

 默认创建出的分支和创建之前的分支是一模一样的

 将分支提交后，提交到某个分支上，这个文件就归属于提交的这个分支。一般情况下，开发项目，都会有一个主分支，在这个分支上拉去自己的小分支进行开发，如果发生错误，不会影响主分支

 在主分支上合并小分支
 git merge 小分支

 git merge dev    把小分支合并
 git checkout -D dev  小分支删掉

 如果初始化错误，需要删除桌面的.git
 rm -rf .git 只删除桌面.git

 rm 只能删除文件

 rm -rf *删除桌面所有文件

git remote rm origin 删除远程链接


 可以联合提交，但是只限提交过的文件
 git add -a -m 'uglify'

 解决冲突
 去掉>>>>>>>>>>>>>>>  ========  <<<<<<<<<<<<<<<  再次提交最终的结果
